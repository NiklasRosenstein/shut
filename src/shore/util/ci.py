# -*- coding: utf8 -*-
# Copyright (c) 2020 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

from . import git
from shore.model import Monorepo, Package
from shore.util.version import parse_version, Version
from typing import Union


def get_ci_version(subject: [Monorepo, Package]) -> Version:
  """ This function creates a string which describes the version of the
  monorepo or package that includes the commit distance and SHA revision
  number.

  For a mono repository, the full commit distance is used. The same is true
  for a single package. For a package inside a mono repository that does not
  apply mono versioning, the packages' local commit distance is used.

  This is close to what `git describe --tags` does. An example version number
  generated by this function is: `0.1.0-24-gd9ade3f`

  Notes:

  - The produced version string is not compatible with PEP440.
  - If the tag for the version of *subject* does not exist on the repository,
    it will fall back to 0.0.0 as the version number which is treated as
    "the beginning of the repository", even if no tag for this version exists.

    - Todo: We could try to find the previous tag for this subject and use
      that.
  """

  if isinstance(subject, Package) and subject.monorepo \
      and subject.monorepo.mono_versioning:
    subject = subject.monorepo

  tag = subject.get_tag(subject.version)
  if git.rev_parse(tag):
    distance = len(git.rev_list(tag + '..HEAD', subject.directory))
  else:
    tag = '0.0.0'
    distance = len(git.rev_list('HEAD', subject.directory))

  rev = git.rev_parse('HEAD')
  return str(subject.version) + '-{}-g{}'.format(distance, rev[:7])
