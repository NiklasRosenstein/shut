#!/usr/bin/env python
# automatically created by shore {{shore_version}}

from __future__ import print_function
import argparse
import os
import subprocess
import sys

package_def = {{package_def}}

parser = argparse.ArgumentParser()
parser.add_argument('packages', nargs='*')
parser.add_argument('--no-develop', action='store_true', help='Perform a normal install of the packages.')
parser.add_argument('--uninstall', action='store_true', help='Uninstall the packages instead.')
parser.add_argument('--type', choices=('install', 'develop'), help='Alternative for using or not using --no-develop.')
parser.add_argument('-v', '--verbose', action='store_true', help='Print the Pip command that is run.')
parser.add_argument('--extras', help='Comma-separated extras to install.')
args = parser.parse_args()

if args.type and args.uninstall:
  parser.error('conflicting options: --type and --uninstall')
if args.no_develop and args.uninstall:
  parser.error('conflicting options: --no-develop and --uninstall')
if args.type == 'develop':
  if args.no_develop:
    parser.error('conflicting options: --type=develop and --no-develop')
elif args.type == 'install':
  args.no_develop = True

if not args.packages:
  install_packages = [x['name'] for x in package_def]
else:
  install_packages = []
  def _resolve(pkgname, extras=()):
    extras = list(filter(bool, extras))
    if pkgname in install_packages:
      return
    package = next((x for x in package_def if x['name'] == pkgname), None)
    if package is None:
      parser.error('not a package of this monorepo: {}'.format(pkgname))
    [_resolve(x) for x in package['requires']]
    for extra in extras:
      [_resolve(x) for x in package['extra_requires'].get(extra, [])]
    if extras:
      pkgname += '[' + ','.join(extras) + ']'
    install_packages.append(pkgname)
  [_resolve(x, (args.extras or '').split(',')) for x in args.packages]

python = os.getenv('PYTHON', 'python')
command = [python, '-m', 'pip', 'uninstall' if args.uninstall else 'install']
for pkgname in install_packages:
  if not args.no_develop and not args.uninstall:
    command.append('-e')
  command.append(pkgname if args.uninstall else './' + pkgname)
if args.uninstall:
  command.append('-y')

project_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if args.verbose:
  command.append('-v')
  print('Running command in working directory', project_dir)
  print('$', ' '.join(command))

sys.exit(subprocess.call(command, cwd=project_dir))
